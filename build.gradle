plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'org.jmailen.kotlinter' version '1.25.1'
    id 'jacoco'
}

allprojects{
    repositories {
        jcenter()
    }
}

subprojects{
    apply {
        plugin("kotlin")
        plugin("org.jmailen.kotlinter")
        plugin("jacoco")
    }
    
    group 'br.com.bexs'
    version '1.0-SNAPSHOT'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
        testCompile 'org.assertj:assertj-core:3.11.1'
    }

    kotlinter {
        ignoreFailures = true
        indentSize = 4
        continuationIndentSize = 4
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        fileBatchSize = 30
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    tasks.withType(Test) {
        testLogging {
            events "failed", "passed", "skipped", "standard_out"

            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

jacoco {
    toolVersion = '0.8.3'
}

task('jacocoRootReport', type: JacocoReport) {
    dependsOn = subprojects.test

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.60
            }
        }
    }
}